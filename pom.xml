<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>me.noip.ksmigrod.testy.cdi-swing</groupId>
    <artifactId>DecoupledUI</artifactId>
    <version>1.1-SNAPSHOT</version>
    <packaging>jar</packaging>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.jboss.weld</groupId>
                <artifactId>weld-core-bom</artifactId>
                <version>2.4.8.Final</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.jboss.weld.se</groupId>
            <artifactId>weld-se</artifactId>
        </dependency>
        <dependency>
	    <!-- Required for newer weld-se -->
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>runtime</scope>
        </dependency>
    </dependencies>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>eu.mihalyi.Starter</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>eu.mihalyi.Starter</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>RAM-drive</id>
            <!-- Creates target folder in location pointed by RAM-drive property to reduce SSD wear. -->
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.gmaven</groupId>
                        <artifactId>groovy-maven-plugin</artifactId>
                        <version>2.1</version>
                        <executions>
                            <execution>
                                <id>prep-work-tree</id>
                                <goals><goal>execute</goal></goals>
                                <phase>initialize</phase>
                                <configuration>
                                    <source>
                                        import java.nio.file.*
                                        def dir = "${RAM-drive}/mvn/${project.groupId}/${project.artifactId}/${project.version}"
                                        println "using Maven dir ${dir}"
                                        def dirPath = Paths.get(dir)
                                        if (!Files.exists(dirPath)) {
                                            Files.createDirectories(dirPath)
                                        }
                                        def target = Paths.get("${project.build.directory}")
                                        if (!Files.exists(target)) {
                                            Files.createSymbolicLink(target, dirPath)
                                        }
                                    </source>
                                </configuration>
                            </execution>
                            <execution>
                                <id>drop-symlink</id>
                                <goals><goal>execute</goal></goals>
                                <phase>clean</phase>
                                <configuration>
                                    <source>
                                        import java.nio.file.*
                                        def target = Paths.get("${project.build.directory}")
                                        if (Files.isSymbolicLink(target)) {
                                            Files.delete(target)
                                        }
                                    </source>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
